{
  "name": "Notion Agent - Standalone Test",
  "nodes": [
    {
      "parameters": {},
      "id": "manual-trigger",
      "name": "Manual Test Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "test-context",
              "name": "testContext",
              "value": {
                "sessionId": "={{ $now.toISOString() }}",
                "workflowType": "notion_agent_test",
                "startTime": "={{ new Date().toISOString() }}",
                "agentType": "notion",
                "taskDescription": "Check for Not Started ideas from today (daysBack=1), process and categorize them using multi-idea parsing methodology",
                "testMode": true
              },
              "type": "object"
            }
          ]
        },
        "options": {}
      },
      "id": "setup-context",
      "name": "Setup Test Context",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [460, 300]
    },
    {
      "parameters": {
        "toolDescription": "Get ideas from Notion database - returns all ideas with status, content, tags. Use status='Not Started' to find unprocessed ideas. Use daysBack=1 for today's ideas.",
        "method": "GET",
        "url": "http://host.docker.internal:3001/api/ideas?limit={limit}&filter={filter}&status={status}&daysBack={daysBack}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "limit",
              "description": "Number of ideas to retrieve (default: 50, max: 100)"
            },
            {
              "name": "filter",
              "description": "Optional text search filter for title/content"
            },
            {
              "name": "status",
              "description": "Status filter: 'Not Started', 'In Progress', 'Done'"
            },
            {
              "name": "daysBack",
              "description": "Filter ideas modified in last N days (1 for today)"
            }
          ]
        }
      },
      "id": "get-ideas-tool",
      "name": "Notion Get Ideas",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [700, 200]
    },
    {
      "parameters": {
        "toolDescription": "Get specific idea by ID for detailed analysis - returns full idea content including rich page blocks",
        "method": "GET",
        "url": "http://host.docker.internal:3001/api/ideas/{idea_id}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "idea_id",
              "description": "ID of the specific idea to retrieve"
            }
          ]
        }
      },
      "id": "get-idea-by-id-tool",
      "name": "Notion Get Idea By ID",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [700, 300]
    },
    {
      "parameters": {
        "toolDescription": "Search ideas by query string - finds ideas matching text content in title, description, or content fields",
        "method": "POST",
        "url": "http://host.docker.internal:3001/api/ideas/search",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"query\": \"{query}\",\n  \"limit\": {limit}\n}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "query",
              "description": "Search query to find relevant ideas"
            },
            {
              "name": "limit",
              "description": "Number of results to return (default: 20)"
            }
          ]
        }
      },
      "id": "search-ideas-tool",
      "name": "Notion Search Ideas",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [700, 400]
    },
    {
      "parameters": {
        "toolDescription": "Update idea status, content, or tags - use for processing workflow management. Set status to 'In Progress' when starting work, 'Done' when completed.",
        "method": "PUT",
        "url": "http://host.docker.internal:3001/api/ideas/{idea_id}",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "{\n  \"status\": \"{status}\",\n  \"content\": \"{content}\",\n  \"tags\": {tags}\n}",
        "placeholderDefinitions": {
          "values": [
            {
              "name": "idea_id",
              "description": "ID of the idea to update"
            },
            {
              "name": "status",
              "description": "New status: 'Not Started', 'In Progress', 'Done'"
            },
            {
              "name": "content",
              "description": "Updated content for the idea (optional)"
            },
            {
              "name": "tags",
              "description": "Array of tags as JSON (optional)"
            }
          ]
        }
      },
      "id": "update-idea-tool",
      "name": "Notion Update Idea",
      "type": "@n8n/n8n-nodes-langchain.toolHttpRequest",
      "typeVersion": 1.1,
      "position": [700, 500]
    },
    {
      "parameters": {
        "model": "gpt-4o-mini",
        "options": {
          "temperature": 0.3,
          "maxTokens": 4000
        }
      },
      "id": "gpt-model",
      "name": "GPT-4o Mini Notion Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [680, 700],
      "credentials": {
        "openAiApi": {
          "id": "1",
          "name": "OpenAI API"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "Task: {{ $json.testContext.taskDescription }}\n\nExecute this task using your MCP tools. Focus on testing all the tool functionality while accomplishing the goal.",
        "hasOutputParser": false,
        "agent": "toolsAgent",
        "options": {
          "systemMessage": "You are the Notion Agent - the specialist for all Notion idea database operations.\n\n# NOTION AGENT SPECIALIZATION\n\n## Core Mission\nHandle all Notion database operations with expertise in idea processing, categorization, and multi-idea parsing methodology.\n\n## Your MCP Tools:\n1. **get_ideas**: Retrieve ideas with status='Not Started' and daysBack=1 for today's unprocessed ideas\n2. **get_idea_by_id**: Deep analysis of specific ideas for multi-idea parsing\n3. **search_ideas**: Find related content and patterns\n4. **update_idea**: Status updates (Not Started → In Progress → Done) and categorization\n\n## Multi-Idea Parsing Methodology:\n\n### Detection Rules:\n1. **Paragraph Separation**: Empty blocks between content indicate separate ideas\n2. **Empty Block Delimiter**: Use blank lines as natural separators\n3. **Link + Description Grouping**: Title + URL + description = single idea\n4. **Topic Shift Detection**: Different subjects = different ideas\n\n### Categorization Rules:\n- **Project Table**: Actionable items, development tasks, concrete goals\n- **Journal Table**: Personal thoughts, reflections, observations\n- **General Table**: Miscellaneous content, references, temporary notes\n\n### Status Processing Workflow:\n- **Not Started** → Find and analyze\n- **In Progress** → Update during processing\n- **Done** → Mark when complete, skip in future processing\n\n## Processing Instructions:\n1. **Start with get_ideas** using status='Not Started' and daysBack=1\n2. **Analyze each idea** for multi-idea content using get_idea_by_id\n3. **Parse and separate** multiple ideas within single posts\n4. **Categorize appropriately** based on content type\n5. **Update status** to reflect processing state\n6. **Report results** with structured analysis\n\n## Output Requirements:\n- Execute the assigned task thoroughly using multi-idea parsing methodology\n- Update status: In Progress when starting, Done when complete\n- Provide structured results for shared context\n- Include recommendations for next steps\n- Report if all recent ideas are fully processed\n\n**Focus on executing the task while demonstrating your MCP tool capabilities and multi-idea parsing expertise.**",
          "maxIterations": 15
        }
      },
      "id": "notion-agent",
      "name": "Notion Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.6,
      "position": [680, 300]
    },
    {
      "parameters": {
        "jsCode": "// Analyze Notion Agent Test Results\nconst notionOutput = $json;\nconst testContext = $('Setup Test Context').first().json.testContext;\n\n// Extract output text\nconst outputText = notionOutput.output || notionOutput.text || JSON.stringify(notionOutput) || '';\n\n// Analyze tool usage\nconst toolUsageAnalysis = {\n  usedGetIdeas: outputText.includes('get_ideas') || outputText.toLowerCase().includes('retrieved ideas'),\n  usedGetById: outputText.includes('get_idea_by_id') || outputText.toLowerCase().includes('analyzed idea'),\n  usedSearch: outputText.includes('search_ideas') || outputText.toLowerCase().includes('searched'),\n  usedUpdate: outputText.includes('update_idea') || outputText.toLowerCase().includes('updated'),\n  mentionedStatus: outputText.toLowerCase().includes('not started') || outputText.toLowerCase().includes('in progress'),\n  mentionedMultiIdea: outputText.toLowerCase().includes('multi') || outputText.toLowerCase().includes('parsing'),\n  mentionedCategorization: outputText.toLowerCase().includes('project') || outputText.toLowerCase().includes('journal')\n};\n\n// Calculate success metrics\nconst toolsUsed = Object.values(toolUsageAnalysis).filter(Boolean).length;\nconst hasStructuredOutput = outputText.length > 100;\nconst hasNotionFocus = outputText.toLowerCase().includes('notion') || outputText.toLowerCase().includes('idea');\n\n// Determine test status\nconst testStatus = {\n  toolUsageScore: toolsUsed,\n  maxToolScore: Object.keys(toolUsageAnalysis).length,\n  hasStructuredOutput,\n  hasNotionFocus,\n  overallScore: (toolsUsed / Object.keys(toolUsageAnalysis).length) * 100\n};\n\nconst testResults = {\n  timestamp: new Date().toISOString(),\n  testType: 'Notion Agent Standalone',\n  testContext,\n  toolUsageAnalysis,\n  testStatus,\n  outputText,\n  summary: {\n    status: testStatus.overallScore >= 50 && hasStructuredOutput ? 'PASSED' : 'FAILED',\n    score: Math.round(testStatus.overallScore),\n    toolsUsed: toolsUsed,\n    hasNotionExpertise: hasNotionFocus\n  }\n};\n\nreturn [testResults];"
      },
      "id": "analyze-results",
      "name": "Analyze Test Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "leftValue": "",
            "caseSensitive": true,
            "typeValidation": "strict"
          },
          "combinator": "and",
          "conditions": [
            {
              "operator": {
                "type": "string",
                "operation": "equals"
              },
              "leftValue": "={{ $json.summary.status }}",
              "rightValue": "PASSED"
            }
          ]
        },
        "options": {}
      },
      "id": "test-result-switch",
      "name": "Test Result Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "jsCode": "// SUCCESS: Notion Agent Test Passed\nconst results = $json;\n\nreturn [{\n  status: 'SUCCESS',\n  message: '✅ Notion Agent Test PASSED',\n  details: {\n    score: results.summary.score + '%',\n    toolsUsed: results.summary.toolsUsed + '/' + results.testStatus.maxToolScore,\n    hasStructuredOutput: results.testStatus.hasStructuredOutput,\n    hasNotionExpertise: results.summary.hasNotionExpertise,\n    toolUsage: results.toolUsageAnalysis\n  },\n  analysis: {\n    strengths: [\n      results.toolUsageAnalysis.usedGetIdeas ? 'Successfully used get_ideas tool' : null,\n      results.toolUsageAnalysis.usedGetById ? 'Used get_idea_by_id for analysis' : null,\n      results.toolUsageAnalysis.mentionedStatus ? 'Understands status workflow' : null,\n      results.toolUsageAnalysis.mentionedMultiIdea ? 'Aware of multi-idea parsing' : null\n    ].filter(Boolean),\n    areas_for_improvement: [\n      !results.toolUsageAnalysis.usedUpdate ? 'Could use update_idea tool more' : null,\n      !results.toolUsageAnalysis.mentionedCategorization ? 'Could improve categorization logic' : null\n    ].filter(Boolean)\n  },\n  nextSteps: [\n    'Notion Agent is working with MCP tools',\n    'Ready to integrate with Director routing',\n    'Can handle idea processing tasks'\n  ],\n  timestamp: results.timestamp\n}];"
      },
      "id": "success-output",
      "name": "✅ Test Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1320, 200]
    },
    {
      "parameters": {
        "jsCode": "// FAILURE: Notion Agent Test Failed\nconst results = $json;\n\nreturn [{\n  status: 'FAILURE',\n  message: '❌ Notion Agent Test FAILED',\n  details: {\n    score: results.summary.score + '%',\n    toolsUsed: results.summary.toolsUsed + '/' + results.testStatus.maxToolScore,\n    hasStructuredOutput: results.testStatus.hasStructuredOutput,\n    toolUsage: results.toolUsageAnalysis\n  },\n  issues: [\n    results.summary.score < 30 ? 'Very low tool usage - check MCP server connection' : null,\n    !results.testStatus.hasStructuredOutput ? 'Agent output too brief or empty' : null,\n    !results.summary.hasNotionExpertise ? 'Agent not demonstrating Notion expertise' : null,\n    !results.toolUsageAnalysis.usedGetIdeas ? 'Failed to use basic get_ideas tool' : null\n  ].filter(Boolean),\n  troubleshooting: [\n    'Check MCP server is running on port 3001',\n    'Verify notion-idea-server is accessible',\n    'Test API endpoints manually: curl http://localhost:3001/api/ideas',\n    'Check agent system message and tool configurations',\n    'Verify Claude API credentials'\n  ],\n  rawOutput: results.outputText.substring(0, 500) + '...',\n  timestamp: results.timestamp\n}];"
      },
      "id": "failure-output",
      "name": "❌ Test Failure",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1320, 400]
    }
  ],
  "connections": {
    "Manual Test Trigger": {
      "main": [
        [
          {
            "node": "Setup Test Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Test Context": {
      "main": [
        [
          {
            "node": "Notion Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Notion Get Ideas": {
      "ai_tool": [
        [
          {
            "node": "Notion Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Notion Get Idea By ID": {
      "ai_tool": [
        [
          {
            "node": "Notion Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Notion Search Ideas": {
      "ai_tool": [
        [
          {
            "node": "Notion Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Notion Update Idea": {
      "ai_tool": [
        [
          {
            "node": "Notion Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o Mini Notion Model": {
      "ai_languageModel": [
        [
          {
            "node": "Notion Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Notion Agent": {
      "main": [
        [
          {
            "node": "Analyze Test Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Test Results": {
      "main": [
        [
          {
            "node": "Test Result Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Test Result Switch": {
      "main": [
        [
          {
            "node": "✅ Test Success",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "❌ Test Failure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-01-15T09:00:00.000Z",
  "versionId": "test-notion-v1"
} 